#!/usr/bin/env php
<?php

if (!is_file('.composer.json')) {
    echo('There is no ".composer.json" template file in the current directory "' . getcwd() . '", make sure you are in the right directory and a template exists.');
    exit(1);
}

function mergeArraySection(array $joinedManifest, array $manifestData, string $sectionKey): array
{
    if (isset($manifestData[$sectionKey])) {
        if ($sectionKey !== 'require') {
            $manifestData[$sectionKey] = array_diff_key($manifestData[$sectionKey], $joinedManifest['require']);
            if ($manifestData[$sectionKey] === []) {
                return $joinedManifest;
            }
        }
        if (!isset($joinedManifest[$sectionKey])) {
            $joinedManifest[$sectionKey] = [];
        }
        $joinedManifest[$sectionKey] = array_merge($joinedManifest[$sectionKey], $manifestData[$sectionKey]);
    }

    return $joinedManifest;
}

function mergeAutoloadSection(array $joinedManifest, array $manifestData, string $sectionKey, string $flowPackageName): array
{
    if (isset($manifestData[$sectionKey])) {
        if (!isset($joinedManifest[$sectionKey])) {
            $joinedManifest[$sectionKey] = [];
        }
        foreach ($manifestData[$sectionKey] as $autoloadType => $mappings) {
            foreach ($mappings as $namespace => $folders) {
                if (!is_array($folders)) {
                    $folders = [$folders];
                }
                $folders = array_map(static function ($folder) use ($flowPackageName) {
                    return implode('/', [$flowPackageName, $folder]);
                }, $folders);

                if (!isset($joinedManifest[$sectionKey][$autoloadType][$namespace])) {
                    $joinedManifest[$sectionKey][$autoloadType][$namespace] = [];
                }

                $joinedManifest[$sectionKey][$autoloadType][$namespace] = array_merge($joinedManifest[$sectionKey][$autoloadType][$namespace], $folders);
            }
        }
    }

    return $joinedManifest;
}

$composerManifests = glob('*/composer.json');

$joinedManifest = json_decode(file_get_contents('.composer.json'), true, 512, JSON_THROW_ON_ERROR);
// As JSON doesn't allow for any comments this is added as manifest key.
$joinedManifest['extra']['neos']['warning'] = 'AUTOGENERATED FILE, ONLY MODIFY THE .composer.json IN THIS DIRECTORY AND RUN THE COMPOSER MANIFEST MERGER SCRIPT PROVIDED BY THE BUILD ESSENTIALS PACKAGE.';

$joinedRepositoryPackages = [];

foreach ($composerManifests as $manifestFilepath) {
    $flowPackageName = trim(dirname($manifestFilepath), '/');
    $manifestData = json_decode(file_get_contents($manifestFilepath), true, 512, JSON_THROW_ON_ERROR);

    $composerPackageName = $manifestData['name'];

    $joinedRepositoryPackages[] = $composerPackageName;

    foreach (['require', 'require-dev', 'suggest'] as $arraySectionKey) {
        $joinedManifest = mergeArraySection($joinedManifest, $manifestData, $arraySectionKey);
    }

    foreach (['autoload', 'autoload-dev'] as $autoloadSectionKey) {
        $joinedManifest = mergeAutoloadSection($joinedManifest, $manifestData, $autoloadSectionKey, $flowPackageName);
    }

    // for the neos-package-collection we add its sub packages
    $joinedManifest['extra']['neos']['collection-packages'][$composerPackageName] = [
        'path' => $flowPackageName
    ];

    if (isset($manifestData['extra'])) {
        $extras = $manifestData['extra'];

        if (isset($extras['neos']['package-key'])) {
            unset($extras['neos']['package-key']);
        }

        if (array_key_exists('applied-flow-migrations', $extras)) {
            unset($extras['applied-flow-migrations']);
        }

        if (isset($extras['neos']['installer-resource-folders']) && is_array($extras['neos']['installer-resource-folders'])) {
            $extras['neos']['installer-resource-folders'] = array_map(static function ($resourceFolder) use ($flowPackageName) {
                return $flowPackageName . '/' . $resourceFolder;
            }, $extras['neos']['installer-resource-folders']);
        }

        $joinedManifest['extra'] = array_merge_recursive($joinedManifest['extra'], $extras);
    }

    if (isset($manifestData['replace'])) {
        $replace = $manifestData['replace'];
        $joinedManifest['replace'] = array_merge_recursive($joinedManifest['replace'], $replace);
    }
}

foreach ($joinedRepositoryPackages as $containedPackageName) {
    unset($joinedManifest['require'][$containedPackageName]);
    $joinedManifest['replace'][$containedPackageName] = 'self.version';
}

$joinedComposerJson = json_encode($joinedManifest, JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . PHP_EOL;
file_put_contents('composer.json', $joinedComposerJson);

echo('Written the following merged ' . getcwd() . '/composer.json' . PHP_EOL . PHP_EOL);
echo $joinedComposerJson;
